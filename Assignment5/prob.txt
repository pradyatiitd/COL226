In this assignment, you will write a type-checker for a simple functional language.

You need to write a Prolog predicate hastype(Gamma, E, T), where
• Gamma is a list of variable-type pairs, representing type assumptions on variables
• E is an object language expression,
• T is a type.

This predicate is mutually recursively defined with another Prolog predicate
typeElaborates(Gamma, D, Gamma') where D is a definition.

E ranges over (at least)
1. variables, modelled as say variable(X)
2. constants, both numerical and boolean (at least)
3. arithmetic operations over numerical expressions
4. boolean operations over boolean expressions
5. comparison operations over numerical expressions
6. equality over arbitrary expressions, where equality can be decided 
7. conditional expressions if_then_else
8. qualified expressions of the form let D in E end
9. function abstractions X.E with functions as first-class citizens 
10. function application (E1 E2)
11. n-tuples (n >= 0)
12. expressions using projection operations.

and

D ranges over (atleast)
1. simple definitions X =def= E
2. sequential definitions D1; D2
3. parallel definitions D1 || D2
4. local definitions local D1 in D2 end

and

T ranges over (atleast)
1. Type variables modelled as say TypeVar(A)
2. Base types intT, boolT, ...
3. Arrow types T1 -> T2 |
4. cartesian product types T1 * ... * Tn (n>1)

You will need to define suitable constructors for expressions, definitions, types, etc.
